-- layout --
.
./.githooks/
./.githooks/README.md
./.githooks/pre-commit
./.github/
./.github/workflows/
./.github/workflows/copilot-setup-steps.yml
./.gitignore
./AGENTS.md
./LICENSE
./README.mbt.md
./README.md
./asdf.mbt
./asdf_test.mbt
./cmd/
./cmd/main/
./cmd/main/main.mbt
./cmd/main/moon.pkg.json
./moon.mod.json
./moon.pkg.json

-- files --
=== ./.githooks/README.md ===
# Git Hooks

## Pre-commit Hook

This pre-commit hook performs automatic checks before finalizing your commit.

### Usage Instructions

To use this pre-commit hook:

1. Make the hook executable if it isn't already:
   ```bash
   chmod +x .githooks/pre-commit
   ```

2. Configure Git to use the hooks in the .githooks directory:
   ```bash
   git config core.hooksPath .githooks
   ```

3. The hook will automatically run when you execute `git commit`

=== ./.githooks/pre-commit ===
#!/bin/sh

moon check

=== ./.github/workflows/copilot-setup-steps.yml ===
# Reference: https://docs.github.com/en/copilot/how-tos/use-copilot-agents/coding-agent/customize-the-agent-environment
name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up MoonBit
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: Update MoonBit dependencies
        run: |
            moon version --all
            moon update
            

=== ./.gitignore ===
.DS_Store
target/
.mooncakes/
.moonagent/

=== ./AGENTS.md ===
<AGENTS.md file content>

=== ./LICENSE ===
<LICENSE file content>

=== ./README.mbt.md ===
# testuser/asdf

=== ./README.md ===
<symbolic link to README.mbt.md>

=== ./asdf.mbt ===
///|
pub fn fib(n : Int) -> Int64 {
  loop (n, 0L, 1L) {
    (0, _, b) => b
    (i, a, b) => continue (i - 1, b, a + b)
  }
}

///|
/// data is a labelled argument without default value having type Array[Int]
/// start is an optional labelled argument with default value 0 having type Int
/// length is an optional labelled argument without default value having type Option[Int]
pub fn sum(data~ : Array[Int], start? : Int = 0, length? : Int) -> Int {
  let end = if length is Some(length) { start + length } else { data.length() }
  for i = start, sum = 0; i < end; i = i + 1, sum = sum + data[i] {

  } else {
    sum
  }
}

=== ./asdf_test.mbt ===
///|
test "fib" {
  let array = [1, 2, 3, 4, 5].map(fib)

  // `inspect` is used to check the output of the function
  // Just write `inspect(value)` and execute `moon test --update`
  // to update the expected output, and verify them afterwards
  inspect(array, content="[1, 2, 3, 5, 8]")
}

///|
test "sum" {
  let array = [1, 2, 3, 4, 5]
  inspect(sum(data=array), content="15")
  inspect(sum(data=array, start=1), content="14")
  inspect(sum(data=array, length=3), content="6")
  let length = None
  // Use `?` for punning
  inspect(sum(data=array, length?), content="15")
}

=== ./cmd/main/main.mbt ===
///|
fn main {
  println(@lib.fib(10))
}

=== ./cmd/main/moon.pkg.json ===
{
  "is-main": true,
  "import": [
    {
      "path": "testuser/asdf",
      "alias": "lib"
    }
  ]
}

=== ./moon.mod.json ===
{
  "name": "testuser/asdf",
  "version": "0.1.0",
  "readme": "README.mbt.md",
  "repository": "",
  "license": "Apache-2.0",
  "keywords": [],
  "description": ""
}

=== ./moon.pkg.json ===
{}

